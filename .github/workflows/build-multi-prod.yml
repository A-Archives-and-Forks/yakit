name: Build Multi-Platform Prod

on:
    push:
        tags:
            - "v*"

jobs:
    build_yakit:
        runs-on: macos-13
        env:
            CI: ""
            NODE_OPTIONS: --max_old_space_size=4096
        strategy:
            matrix:
                version:
                    - ce
                    - ee
                    # 示例添加新模块：
                    # - se

        steps:
            - name: Display configuration parameters
              run: echo ${{ matrix.version }}

            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version: 18.18.2
                  # 缓存 yarn 依赖包 ↓↓↓
                  cache: "yarn"
                  cache-dependency-path: yarn.lock

            - run: echo ${{ github.ref }}
            - run: cp buildutil/zip /usr/local/bin/zip
            - run: chmod +x /usr/local/bin/zip
            - run: zip -h

            - name: "Download Yak Engine via wget(MacOS)"
              id: download-darwin-engine
              run: wget -O bins/yak_darwin_amd64 https://oss-qn.yaklang.com/yak/latest/yak_darwin_amd64 && zip ./bins/yak_darwin_amd64.zip ./bins/yak_darwin_amd64 && rm ./bins/yak_darwin_amd64
            - name: "Download Yak Engine via wget(MacOS-arm64)"
              id: download-darwin-engine-arm64
              run: wget -O bins/yak_darwin_arm64 https://oss-qn.yaklang.com/yak/latest/yak_darwin_arm64 && zip ./bins/yak_darwin_arm64.zip ./bins/yak_darwin_arm64 && rm ./bins/yak_darwin_arm64

            - name: "Download Yak Engine via wget(Linux)"
              id: download-linux-engine
              run: wget -O bins/yak_linux_amd64 https://oss-qn.yaklang.com/yak/latest/yak_linux_amd64 && zip ./bins/yak_linux_amd64.zip ./bins/yak_linux_amd64 && rm ./bins/yak_linux_amd64
            - name: "Download Yak Engine via wget(Linux-arm64)"
              id: download-linux-engine-arm64
              run: wget -O bins/yak_linux_arm64 https://oss-qn.yaklang.com/yak/latest/yak_linux_arm64 && zip ./bins/yak_linux_arm64.zip ./bins/yak_linux_arm64 && rm ./bins/yak_linux_arm64

            - name: "Download Yak Engine via wget(Windows)"
              id: download-windows-engine
              run: wget -O bins/yak_windows_amd64.exe https://oss-qn.yaklang.com/yak/latest/yak_windows_amd64.exe && zip ./bins/yak_windows_amd64.zip ./bins/yak_windows_amd64.exe && rm ./bins/yak_windows_amd64.exe

            - name: "Fetch Latest EngineVersion"
              run: wget -O bins/engine-version.txt https://oss-qn.yaklang.com/yak/latest/version.txt
            - run: ls ./bins && cat bins/engine-version.txt

            - name: Echo Yakit Package Version To Env
              run: echo "ENV_TAG=${GITHUB_REF_NAME:1}" >> $GITHUB_ENV
              shell: bash

            - name: "Install Render"
              run: |
                  wget -O ${{matrix.version}}.zip https://oss-qn.yaklang.com/yak/render/${{matrix.version}}.zip
                  unzip -n ${{matrix.version}}.zip -d ./app/renderer
                  rm ./${{matrix.version}}.zip

            - run: yarn install
              working-directory: ./
              name: "Install Dependencies"

            - name: Build Yakit (MultiPlatform)
              env:
                  GH_TOKEN: ${{ secrets.GH_TOKEN }}
              working-directory: ./
              run: |
                  yarn add -D dmg-license
                  if [ "${{ matrix.version }}" = "ce" ]; then
                    yarn electron-publish
                  elif [ "${{ matrix.version }}" = "ee" ]; then
                    yarn electron-publish-ee
                  else
                    echo "未知的输入值: ${{ matrix.version }}" >&2
                    exit 1
                  fi

            - run: yarn add electron@22.3.27
              working-directory: ./
              name: "Install Legacy Electron"

            - name: "Download Yak Legacy Engine via wget(Windows)"
              id: download-windows-leagacy-engine
              run: rm ./bins/yak_windows_amd64.zip && wget -O bins/yak_windows_amd64.exe https://oss-qn.yaklang.com/yak/latest/yak_windows_legacy_amd64.exe && zip ./bins/yak_windows_amd64.zip ./bins/yak_windows_amd64.exe && rm ./bins/yak_windows_amd64.exe

            - name: Build Legacy Yakit (MultiPlatform)
              env:
                  GH_TOKEN: ${{ secrets.GH_TOKEN }}
              working-directory: ./
              run: |
                  yarn add -D dmg-license
                  if [ "${{matrix.version}}" = "ce" ]; then
                    yarn electron-publish-legacy
                  elif [ "${{matrix.version}}" = "ee" ]; then
                    yarn electron-publish-ee-legacy
                  else
                    echo "未知的输入值: ${{matrix.version}}" >&2
                    exit 1
                  fi

            - name: View Published Content
              run:
                  ls ./release
                  # EnpriTraceAgent  -1.3.4-sp6-darwin-arm64(.dmg|.exe|.AppImage)
                  # EnpriTrace       -1.3.4-sp6-darwin-arm64(.dmg|.exe|.AppImage)
                  # Yakit            -1.3.4-sp6-darwin-arm64(.dmg|.exe|.AppImage)

            - name: Generate software prefix name
              run: |
                  if [ "${{matrix.version}}" = "ce" ]; then
                    echo "ENV_Software_Name=Yakit" >> $GITHUB_ENV
                  elif [ "${{matrix.version}}" = "ee" ]; then
                    echo "ENV_Software_Name=EnpriTrace" >> $GITHUB_ENV
                  else
                    echo "No software version obtained" >&2
                    exit 1
                  fi

            - name: Show ENV_Software_Name
              run: echo "ENV_Software_Name： $ENV_Software_Name"

            - name: Upload Yakit(CE) Artifacts Windows
              uses: actions/upload-artifact@v4
              with:
                  name: ${{matrix.version}}-${{env.ENV_Software_Name}}-artifacts
                  path: |
                      ./release/${{env.ENV_Software_Name}}-${{ steps.package_version.outputs.value }}-*.exe
                      ./release/${{env.ENV_Software_Name}}-${{ steps.package_version.outputs.value }}-*.dmg
                      ./release/${{env.ENV_Software_Name}}-${{ steps.package_version.outputs.value }}-*.AppImage
                  if-no-files-found: error
                  retention-days: 1
