import React, {useEffect, useRef, useState} from "react"
import {VulnerabilityTypePieProps} from "./VulnerabilityTypePieType"
import classNames from "classnames"
import styles from "./VulnerabilityTypePie.module.scss"
import {EChartsOption, SelectChangedEvent} from "../VulnerabilityLevelPie/VulnerabilityLevelPieType"
import * as echarts from "echarts"
import {useMemoizedFn} from "ahooks"

const dataMapColor = {
    0: {
        selectColor: "rgba(49, 52, 63, 1)",
        color: "rgba(49, 52, 63, 0.3)"
    },
    1: {
        selectColor: "rgba(74, 58, 255, 1)",
        color: "rgba(74, 58, 255, 0.3)"
    },
    2: {
        selectColor: "rgba(150, 45, 255, 1)",
        color: "rgba(150, 45, 255, 0.3)"
    },
    3: {
        selectColor: "rgba(218, 95, 221, 1)",
        color: "rgba(218, 95, 221, 0.3)"
    },
    4: {
        selectColor: "rgba(41, 188, 208, 1)",
        color: "rgba(41, 188, 208, 0.3)"
    },
    5: {
        selectColor: "rgba(53, 216, 238, 1)",
        color: "rgba(53, 216, 238, 0.3)"
    },
    6: {
        selectColor: "rgba(255, 182, 96, 1)",
        color: "rgba(255, 182, 96, 0.3)"
    },
    7: {
        selectColor: "rgba(255, 213, 131, 1)",
        color: "rgba(255, 213, 131, 0.3)"
    },
    8: {
        selectColor: "rgba(224, 198, 253, 1)",
        color: "rgba(224, 198, 253, 0.3)"
    },
    9: {
        selectColor: "rgba(204, 210, 222, 1)",
        color: "rgba(204, 210, 222, 0.3)"
    }
}
const data = [
    {
        value: 1400,
        name: "敏感信息泄漏",
        selected: true,
        select: {
            itemStyle: {
                color: dataMapColor[0].selectColor
            }
        }
    },
    {
        value: 840,
        name: "CVE 基线检查",
        selected: true,
        select: {
            itemStyle: {
                color: dataMapColor[1].selectColor
            }
        }
    },
    {
        value: 410,
        name: "信息",
        selected: true,
        select: {
            itemStyle: {
                color: dataMapColor[2].selectColor
            }
        }
    },
    {
        value: 380,
        name: "反连",
        selected: true,
        select: {
            itemStyle: {
                color: dataMapColor[3].selectColor
            }
        }
    },
    {
        value: 300,
        name: "GIT 源码泄漏",
        selected: true,
        select: {
            itemStyle: {
                color: dataMapColor[4].selectColor
            }
        }
    },
    {
        value: 200,
        name: "登录表单检测",
        selected: true,
        select: {
            itemStyle: {
                color: dataMapColor[5].selectColor
            }
        }
    },
    {
        value: 100,
        name: "主动指纹扫描",
        selected: true,
        select: {
            itemStyle: {
                color: dataMapColor[6].selectColor
            }
        }
    },
    {
        value: 108,
        name: "SQL 注入",
        selected: true,
        select: {
            itemStyle: {
                color: dataMapColor[7].selectColor
            }
        }
    },
    {
        value: 98,
        name: "CrossDomain 配置信息",
        selected: true,
        select: {
            itemStyle: {
                color: dataMapColor[8].selectColor
            }
        }
    },
    {
        value: 88,
        name: "远程代码执行",
        selected: true,
        select: {
            itemStyle: {
                color: dataMapColor[9].selectColor
            }
        }
    }
]

export const VulnerabilityTypePie: React.FC<VulnerabilityTypePieProps> = React.memo((props) => {
    const {className} = props
    const [select, setSelect] = useState<string[]>(data.map((item) => item.name))
    const chartRef = useRef(null)
    const pieChart = useRef<echarts.ECharts>()
    const optionRef = useRef<EChartsOption>({
        series: [
            {
                type: "pie",
                radius: ["40%", "80%"],
                avoidLabelOverlap: false,
                legendHoverLink: true,
                selectedMode: "multiple",
                selectedOffset: 5,
                minAngle: 20,
                itemStyle: {
                    color: (params) => {
                        return dataMapColor[params.dataIndex].color
                    },
                    borderRadius: 4,
                    borderColor: "#fff",
                    borderWidth: 1
                },
                label: {
                    show: false,
                    position: "center"
                },
                emphasis: {
                    label: {
                        show: true,
                        padding: [4, 8],
                        formatter: ["{c|{c}}", "{b|{b}}"].join("\n"),
                        rich: {
                            b: {
                                color: "#B4BBCA",
                                fontSize: 14,
                                fontWeight: 400,
                                lineHeight: 32
                            },
                            c: {
                                color: "#31343F",
                                fontSize: 24,
                                fontWeight: 700,
                                lineHeight: 36
                            }
                        },
                        width: 84,
                        overflow: "truncate",
                        ellipsis: "..."
                    },
                    itemStyle: {
                        opacity: 0.9
                    }
                },
                data
            }
        ]
    })
    useEffect(() => {
        pieChart.current = echarts.init(chartRef.current)
        pieChart.current.setOption(optionRef.current)
        pieChart.current.on("selectchanged", onSelectChanged)
        return () => {
            if (pieChart.current) {
                pieChart.current.off("selectchanged", onSelectChanged)
                pieChart.current.dispose()
            }
        }
    }, [])
    const onSelectChanged = useMemoizedFn((value) => {
        const {fromAction, fromActionPayload} = value as any as SelectChangedEvent
        //不额外处理全选
        if (fromAction === "toggleSelect") {
            return
        }
        const {dataIndexInside} = fromActionPayload
        const selectName = data[dataIndexInside].name
        let newSelect = [...select]
        switch (fromAction) {
            case "select":
                if (newSelect.length > 0 && newSelect.includes(selectName)) return
                newSelect.push(selectName)
                break
            case "unselect":
                newSelect = select.filter((ele) => ele != selectName)
                break
            default:
                break
        }
        /** 当最后一个选中状态被取消时，默认全选 */
        if (newSelect.length == 0) {
            newSelect = data.map((ele) => ele.name)
            pieChart.current?.dispatchAction({
                type: "toggleSelect",
                seriesIndex: 0, // 选择第一个系列
                dataIndex: Array.from({length: data.length}, (_, i) => i) // 选择所有数据项
            })
        }
        setSelect(newSelect)
    })
    const onSelectList = useMemoizedFn((isSelect, index) => {
        const selectItem = {
            type: isSelect ? "unselect" : "select",
            seriesIndex: 0, // 选择第一个系列
            dataIndexInside: index // 选择数据项
        }
        pieChart.current?.dispatchAction({
            ...selectItem
        })
    })
    return (
        <div className={styles["vulnerability-type-pie-container"]}>
            <div className={classNames(styles["vulnerability-type-pie"], className)} ref={chartRef}></div>
            <div className={styles["vulnerability-type-pie-list"]}>
                {data.map((ele, index) => {
                    const isSelect = select.includes(ele.name)
                    return (
                        <div
                            className={classNames(styles["vulnerability-type-pie-list-item"], {
                                [styles["vulnerability-type-pie-list-item-selected"]]: isSelect
                            })}
                            onClick={(e) => onSelectList(isSelect, index)}
                        >
                            <div className={classNames(styles["vulnerability-type-pie-list-item-name"])}>
                                <div
                                    className={classNames(
                                        styles["vulnerability-type-pie-list-item-radius"],
                                        styles[`bg-color-${index}`]
                                    )}
                                />
                                <div className='content-ellipsis'>{ele.name}</div>
                            </div>
                            <div>{ele.value}</div>
                        </div>
                    )
                })}
            </div>
        </div>
    )
})
