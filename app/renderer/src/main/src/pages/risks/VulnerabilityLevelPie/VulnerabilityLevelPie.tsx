import React, {useRef, useEffect, useState, useImperativeHandle, forwardRef} from "react"
import {EChartsOption, SelectChangedEvent, VulnerabilityLevelPieProps} from "./VulnerabilityLevelPieType"
import * as echarts from "echarts"
import classNames from "classnames"
import styles from "./VulnerabilityLevelPie.module.scss"
import {useMemoizedFn} from "ahooks"

const dataMapColor = {
    0: {
        selectColor: "rgba(211, 58, 48, 1)",
        color: "rgba(211, 58, 48, 0.3)"
    },
    1: {
        selectColor: "rgba(246, 84, 74, 1)",
        color: "rgba(246, 84, 74, 0.3)"
    },
    2: {
        selectColor: "rgba(255, 182, 96, 1)",
        color: "rgba(255, 182, 96, 0.3)"
    },
    3: {
        selectColor: "rgba(255, 213, 131, 1)",
        color: "rgba(255, 213, 131, 0.3)"
    },
    4: {
        selectColor: "rgba(86, 201, 145, 1)",
        color: "rgba(86, 201, 145, 0.3)"
    }
}
export const VulnerabilityLevelPie: React.FC<VulnerabilityLevelPieProps> = React.memo(
    forwardRef((props, ref) => {
        const {className = "", list, onSelect} = props
        const chartRef = useRef(null)
        const [selectList, setSelectList] = useState<string[]>([])

        const getData = useMemoizedFn(() => {
            let seriousNumber = 0
            let highNumber = 0
            let middleNumber = 0
            let lowNumber = 0
            let infoNumber = 0
            const newData = Array(5).fill(null)
            list.forEach((ele) => {
                if (ele.Value.includes("严重") && ele.Total > 0) {
                    seriousNumber = ele.Total
                    newData[0] = {
                        value: seriousNumber,
                        name: "严重",
                        selected: true,
                        select: {
                            itemStyle: {
                                color: dataMapColor[0].selectColor
                            }
                        }
                    }
                }
                if (ele.Value.includes("高危") && ele.Total > 0) {
                    highNumber = ele.Total
                    newData[1] = {
                        value: highNumber,
                        name: "高危",
                        selected: true,
                        select: {
                            itemStyle: {
                                color: dataMapColor[1].selectColor
                            }
                        }
                    }
                }
                if (ele.Value.includes("中危") && ele.Total > 0) {
                    middleNumber = ele.Total
                    newData[2] = {
                        value: middleNumber,
                        name: "中危",
                        selected: true,
                        select: {
                            itemStyle: {
                                color: dataMapColor[2].selectColor
                            }
                        }
                    }
                }
                if (ele.Value.includes("低危") && ele.Total > 0) {
                    lowNumber = ele.Total
                    newData[3] = {
                        value: lowNumber,
                        name: "低危",
                        selected: true,
                        select: {
                            itemStyle: {
                                color: dataMapColor[3].selectColor
                            }
                        }
                    }
                }
                if (ele.Value.includes("信息") && ele.Total > 0) {
                    infoNumber = ele.Total
                    newData[4] = {
                        value: infoNumber,
                        name: "信息",
                        selected: true,
                        select: {
                            itemStyle: {
                                color: dataMapColor[4].selectColor
                            }
                        }
                    }
                }
            })
            return newData
        })
        const optionRef = useRef<EChartsOption>({
            series: [
                {
                    type: "pie",
                    radius: [15, 95],
                    roseType: "radius",
                    itemStyle: {
                        color: (params) => {
                            return dataMapColor[params.dataIndex].color
                        },
                        borderRadius: 4
                    },
                    minAngle: 20,
                    data: [],
                    percentPrecision: 0,
                    label: {
                        fontSize: 12,
                        color: "#31343F",
                        formatter: "{b}\n{d}%",
                        lineHeight: 16,
                        overflow: "break"
                    },
                    selectedMode: "multiple",
                    selectedOffset: 0,
                    select: {
                        itemStyle: {}
                    },
                    emphasis: {
                        scale: true,
                        scaleSize: 5,
                        itemStyle: {
                            opacity: 0.9
                        }
                    },
                    labelLine: {
                        length: 5,
                        length2: 10
                    }
                }
            ]
        })
        const pieChart = useRef<echarts.ECharts>()
        const dataRef = useRef<any[]>([])
        useImperativeHandle(
            ref,
            () => ({
                onReset
            }),
            []
        )
        useEffect(() => {
            if (list && list.length > 0) {
                if (!pieChart.current) pieChart.current = echarts.init(chartRef.current)
                if (!!(optionRef.current.series && optionRef.current.series[0])) {
                    dataRef.current = getData()
                    if (optionRef.current.series[0].data.length === 0) {
                        optionRef.current.series[0].data = dataRef.current
                        pieChart.current.setOption(optionRef.current)
                    } else {
                        const newData = dataRef.current.map((ele) => {
                            if (selectList.length === 0) {
                                return ele
                            } else {
                                ele.selected = selectList.includes(ele.name)
                                return ele
                            }
                        })
                        optionRef.current.series[0].data = newData
                        pieChart.current.setOption(optionRef.current, true)
                    }
                }

                pieChart.current.on("selectchanged", onSelectChanged)
            }

            return () => {
                if (pieChart.current) {
                    pieChart.current.off("selectchanged", onSelectChanged)
                    pieChart.current.dispose()
                    pieChart.current = undefined
                }
            }
        }, [list])
        const onReset = useMemoizedFn(() => {
            if (!pieChart.current) return
            if (!!(optionRef.current.series && optionRef.current.series[0])) {
                const data = getData()
                dataRef.current = data
                optionRef.current.series[0].data = dataRef.current
            }
            pieChart.current.setOption(optionRef.current, true)
            setSelectList([])
            onSelect([])
        })
        /**数据选中状态发生变化时触发的事件 */
        const onSelectChanged = useMemoizedFn((value) => {
            if (!dataRef.current?.length) return
            const {fromAction, fromActionPayload} = value as any as SelectChangedEvent
            //不额外处理全选
            if (fromAction === "toggleSelect") {
                return
            }
            const {dataIndexInside} = fromActionPayload
            const data = dataRef.current
            const selectName = data[dataIndexInside].name
            let newSelect = [...selectList]
            if (selectList.length === 0 && fromAction === "unselect" && pieChart.current) {
                /**当初始没有任何选中的时候,第一次点击，选中点击项，其余项变未选中 */
                if (!!(optionRef.current.series && optionRef.current.series[0])) {
                    optionRef.current.series[0].data = dataRef.current.map((ele) => {
                        if (ele.name === selectName) {
                            return {...ele, selected: true}
                        } else {
                            return {...ele, selected: false}
                        }
                    })
                }
                newSelect.push(selectName)
                pieChart.current.setOption(optionRef.current, true)
            } else {
                switch (fromAction) {
                    case "select":
                        if (newSelect.length > 0 && newSelect.includes(selectName)) return
                        newSelect.push(selectName)
                        break
                    case "unselect":
                        newSelect = selectList.filter((ele) => ele != selectName)
                        break
                    default:
                        break
                }
            }

            /** 当最后一个选中状态被取消时，默认全选 */
            if (newSelect.length == 0) {
                pieChart.current?.dispatchAction({
                    type: "toggleSelect",
                    seriesIndex: 0, // 选择第一个系列
                    dataIndex: Array.from({length: data.length}, (_, i) => i) // 选择所有数据项
                })
            }
            setSelectList(newSelect)
            onSelect(newSelect)
        })
        return <div className={classNames(styles["vulnerability-level-pie"], className)} ref={chartRef}></div>
    })
)
